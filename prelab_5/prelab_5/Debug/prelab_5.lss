
prelab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000887  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076b  00000000  00000000  00000b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
	
	// preescaler = 16M/128=125k
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
	
	//no se utilizara el estado B
	ADCSRB=0;
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
  a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	80 83       	st	Z, r24
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <main>:
	//DIDRO=0;
}

int main(void)
{
	initPWM1(1,1024);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	74 e0       	ldi	r23, 0x04	; 4
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 74 00 	call	0xe8	; 0xe8 <initPWM1>
	
    while (1) 
    {
	updateDC(valor_pot1);
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	0e 94 be 00 	call	0x17c	; 0x17c <updateDC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	86 e7       	ldi	r24, 0x76	; 118
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x22>
  e4:	00 00       	nop
  e6:	f2 cf       	rjmp	.-28     	; 0xcc <main+0xa>

000000e8 <initPWM1>:
 */ 

#include "pwm_1.h"

void initPWM1(uint8_t invertido, uint16_t preescaler){
	DDRB |=(1<<DDB1);
  e8:	94 b1       	in	r25, 0x04	; 4
  ea:	92 60       	ori	r25, 0x02	; 2
  ec:	94 b9       	out	0x04, r25	; 4
	TCCR1A=0;
  ee:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0;
  f2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (invertido==1){
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	31 f4       	brne	.+12     	; 0x106 <initPWM1+0x1e>
		TCCR1A |=(1<<COM1A1)|(1<<COM1A0);//high
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 6c       	ori	r24, 0xC0	; 192
 102:	80 83       	st	Z, r24
 104:	05 c0       	rjmp	.+10     	; 0x110 <initPWM1+0x28>
	} else{
		TCCR1A |=(1<<COM1A1); //low
 106:	e0 e8       	ldi	r30, 0x80	; 128
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 83       	st	Z, r24
	}
	
	switch(preescaler){
 110:	60 34       	cpi	r22, 0x40	; 64
 112:	71 05       	cpc	r23, r1
 114:	e1 f0       	breq	.+56     	; 0x14e <initPWM1+0x66>
 116:	38 f4       	brcc	.+14     	; 0x126 <initPWM1+0x3e>
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	71 05       	cpc	r23, r1
 11c:	61 f0       	breq	.+24     	; 0x136 <initPWM1+0x4e>
 11e:	68 30       	cpi	r22, 0x08	; 8
 120:	71 05       	cpc	r23, r1
 122:	79 f0       	breq	.+30     	; 0x142 <initPWM1+0x5a>
 124:	25 c0       	rjmp	.+74     	; 0x170 <initPWM1+0x88>
 126:	61 15       	cp	r22, r1
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	78 07       	cpc	r23, r24
 12c:	b1 f0       	breq	.+44     	; 0x15a <initPWM1+0x72>
 12e:	61 15       	cp	r22, r1
 130:	74 40       	sbci	r23, 0x04	; 4
 132:	c9 f0       	breq	.+50     	; 0x166 <initPWM1+0x7e>
 134:	1d c0       	rjmp	.+58     	; 0x170 <initPWM1+0x88>
		case 1:
			TCCR1B |=(1<<CS10);
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
			break;
 140:	17 c0       	rjmp	.+46     	; 0x170 <initPWM1+0x88>
		case 8:
			TCCR1B |=(1<<CS11);
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
			break;
 14c:	11 c0       	rjmp	.+34     	; 0x170 <initPWM1+0x88>
		case 64:
			TCCR1B |=(1<<CS10)|(1<<CS11);
 14e:	e1 e8       	ldi	r30, 0x81	; 129
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	83 60       	ori	r24, 0x03	; 3
 156:	80 83       	st	Z, r24
			break;
 158:	0b c0       	rjmp	.+22     	; 0x170 <initPWM1+0x88>
		case 256:
			TCCR1B |=(1<<CS12);
 15a:	e1 e8       	ldi	r30, 0x81	; 129
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	84 60       	ori	r24, 0x04	; 4
 162:	80 83       	st	Z, r24
			break;
 164:	05 c0       	rjmp	.+10     	; 0x170 <initPWM1+0x88>
		case 1024:
			TCCR1B |=(1<<CS12)|(1<<CS10); //preescaler de 1024 para un periodo máximo de 4 segundos
 166:	e1 e8       	ldi	r30, 0x81	; 129
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	85 60       	ori	r24, 0x05	; 5
 16e:	80 83       	st	Z, r24
			break;
	}
	
	TCCR1A |=(1<<WGM12)|(1<<WGM10); //usar fast pwm de 8 bits 0xff siendo el top
 170:	e0 e8       	ldi	r30, 0x80	; 128
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	89 60       	ori	r24, 0x09	; 9
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <updateDC>:
}

void updateDC(uint8_t prc_duty){
	OCR1A=prc_duty;
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
